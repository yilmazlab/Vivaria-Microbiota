x = tapply(sigtab_Brazil_DESeq$log2FoldChange, sigtab_Brazil_DESeq$Rank6, function(x) max(x))
x = sort(x, TRUE)
sigtab_Brazil_DESeq$Rank6 = factor(as.character(sigtab_Brazil_DESeq$Rank6), levels=names(x))
ggplot(sigtab_Brazil_DESeq, aes(x=Rank6, y=log2FoldChange, color=Rank2)) + geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
# Extract a specific comparison, for example, "After" vs "During"
res_IL10KO_vs_WT <- results(diagdds_Brazil_DESeq, contrast = c("Strain_Info", "WT", "IL10KO"))
setwd("/Users/bahti/Desktop")
# Load your data (adjust path if needed)
data <- read.csv("all_results.tsv", sep = "\t")
# Apply the feature simplification directly in R (example for demonstration, adjust if needed)
simplify_taxonomy <- function(name) {
parts <- unlist(strsplit(name, "\\."))
# Search for family (f__) and genus (g__) in the name and combine if both found
family <- grep("^f__", parts, value = TRUE)
genus <- grep("^g__", parts, value = TRUE)
order <- grep("^o__", parts, value = TRUE)
# Simplify name based on availability of genus, family, or order as per user instructions
if (length(family) > 0 && length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(family) > 0) {
return(paste0(".", family, "."))
} else if (length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(order) > 0) {
return(order)
} else {
return(parts[length(parts)])  # Fallback to the most specific level
}
}
# Apply simplification function to 'feature' column
data$simplified_feature <- sapply(data$feature, simplify_taxonomy)
# Filter for IL10KO and calculate marker size based on significance level
il10ko_data <- subset(data, value == "IL10KO")
il10ko_data$marker_size <- -log10(il10ko_data$qval) * 20  # Adjust scaling factor if needed
# Create the volcano plot
ggplot(il10ko_data, aes(x = coef, y = -log10(qval), color = qval < 0.05, size = marker_size)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("gray", "red")) +
labs(
x = "Coefficient (IL10KO vs WT)",
y = "-log10(qval)",
title = "Volcano Plot of IL10KO vs WT with Marker Size by Significance Level"
) +
theme_minimal() +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
geom_text(
data = subset(il10ko_data, qval < 0.05),
aes(label = simplified_feature),
size = 3, hjust = 1, color = "black"
) +
theme(legend.position = "none")
library(phyloseq)
library(phyloseqCompanion)
Brazilphyseq.sample <- readRDS("Brazil.rds") # I put it on the desktop but yours can be in a different folder and change the path accordingly
mm_lefse <- run_lefse(
Brazilphyseq.sample,
wilcoxon_cutoff = 0.01,
group = "Strain_Info",
kw_cutoff = 0.01,
multigrp_strat = TRUE,
lda_cutoff = 3
)
library(phyloseq)
library(phyloseqCompanion)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
for (pkg in c("remotes", "dada2", "phyloseq", "ALDEx2")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
# Apply feature simplification (as before)
simplify_taxonomy <- function(name) {
parts <- unlist(strsplit(name, "\\."))
family <- grep("^f__", parts, value = TRUE)
genus <- grep("^g__", parts, value = TRUE)
order <- grep("^o__", parts, value = TRUE)
if (length(family) > 0 && length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(family) > 0) {
return(paste0(".", family, "."))
} else if (length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(order) > 0) {
return(order)
} else {
return(parts[length(parts)])
}
}
# Apply simplification function to 'feature' column
data$simplified_feature <- sapply(data$feature, simplify_taxonomy)
# Filter for significant IL10KO data only (qval < 0.05)
significant_data <- data %>%
filter(value == "IL10KO" & qval < 0.05) %>%
mutate(direction = ifelse(coef > 0, "IL10KO", "WT"))
# Create the plot with centered title
p <- ggplot(significant_data, aes(x = reorder(simplified_feature, coef), y = coef, fill = direction)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("WT" = "blue", "IL10KO" = "red")) +
labs(
x = "Significant Features",
y = "LDA Score (Coefficient)",
title = "Taxa differences in IL10KO vs WT"
) +
coord_flip() +
theme_minimal() +
theme(
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)  # This centers the title
)
library(phyloseq)
library(phyloseqCompanion)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
for (pkg in c("remotes", "dada2", "phyloseq", "ALDEx2")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
remotes::install_github("ggloor/CoDaSeq/CoDaSeq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALDEx2")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
for (pkg in c("remotes", "dada2", "phyloseq", "ALDEx2")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
remotes::install_github("ggloor/CoDaSeq/CoDaSeq")
install.packages('devtools')
devtools::install_github('ggloor/CoDaSeq/CoDaSeq')
install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
for (pkg in c("remotes", "dada2", "phyloseq", "ALDEx2")) {
if (!requireNamespace(pkg, quietly = TRUE)) {
BiocManager::install(pkg)
}
}
remotes::install_github("ggloor/CoDaSeq/CoDaSeq")
# Load your data (adjust path if needed)
data <- read.csv("all_results.tsv", sep = "\t")
# Apply the feature simplification directly in R (example for demonstration, adjust if needed)
simplify_taxonomy <- function(name) {
parts <- unlist(strsplit(name, "\\."))
# Search for family (f__) and genus (g__) in the name and combine if both found
family <- grep("^f__", parts, value = TRUE)
genus <- grep("^g__", parts, value = TRUE)
order <- grep("^o__", parts, value = TRUE)
# Simplify name based on availability of genus, family, or order as per user instructions
if (length(family) > 0 && length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(family) > 0) {
return(paste0(".", family, "."))
} else if (length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(order) > 0) {
return(order)
} else {
return(parts[length(parts)])  # Fallback to the most specific level
}
}
# Apply simplification function to 'feature' column
data$simplified_feature <- sapply(data$feature, simplify_taxonomy)
# Filter for IL10KO and calculate marker size based on significance level
il10ko_data <- subset(data, value == "IL10KO")
il10ko_data$marker_size <- -log10(il10ko_data$qval) * 20  # Adjust scaling factor if needed
# Create the volcano plot
ggplot(il10ko_data, aes(x = coef, y = -log10(qval), color = qval < 0.05, size = marker_size)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("gray", "red")) +
labs(
x = "Coefficient (IL10KO vs WT)",
y = "-log10(qval)",
title = "Volcano Plot of IL10KO vs WT with Marker Size by Significance Level"
) +
theme_minimal() +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
geom_text(
data = subset(il10ko_data, qval < 0.05),
aes(label = simplified_feature),
size = 3, hjust = 1, color = "black"
) +
theme(legend.position = "none")
# Set working directory
setwd("/Users/bahti/Desktop")
# Load necessary libraries
library(ggplot2)
library(ggrepel)  # Install with install.packages("ggrepel") if not installed
# Load your data
data <- read.csv("all_results.tsv", sep = "\t")
# Apply feature simplification
simplify_taxonomy <- function(name) {
parts <- unlist(strsplit(name, "\\."))
family <- grep("^f__", parts, value = TRUE)
genus <- grep("^g__", parts, value = TRUE)
order <- grep("^o__", parts, value = TRUE)
if (length(family) > 0 && length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(family) > 0) {
return(paste0(".", family, "."))
} else if (length(genus) > 0) {
return(paste0("[", genus, "]"))
} else if (length(order) > 0) {
return(order)
} else {
return(parts[length(parts)])
}
}
# Apply the simplification function
data$simplified_feature <- sapply(data$feature, simplify_taxonomy)
# Filter for IL10KO and calculate marker size
il10ko_data <- subset(data, value == "IL10KO")
il10ko_data$marker_size <- -log10(il10ko_data$qval) * 20
# Create the volcano plot with ggrepel to avoid overlapping
ggplot(il10ko_data, aes(x = coef, y = -log10(qval), color = qval < 0.05, size = marker_size)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("gray", "red")) +
labs(
x = "Coefficient (IL10KO vs WT)",
y = "-log10(qval)",
title = "Volcano Plot of IL10KO vs WT with Marker Size by Significance Level"
) +
theme_minimal() +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
geom_text_repel(
data = subset(il10ko_data, qval < 0.05),
aes(label = simplified_feature),
size = 3, color = "black",
max.overlaps = 10  # Adjust this value to control the number of labels shown
) +
theme(legend.position = "none")
# Save the plot as PDF
ggsave("Taxa differences on Volcano Plot in IL10KO vs WT.pdf", p, width = 15, height = 12)
# Create the volcano plot with ggrepel to avoid overlapping
ggplot(il10ko_data, aes(x = coef, y = -log10(qval), color = qval < 0.05, size = marker_size)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("gray", "red")) +
labs(
x = "Coefficient (IL10KO vs WT)",
y = "-log10(qval)",
title = "Volcano Plot of IL10KO vs WT with Marker Size by Significance Level"
) +
theme_minimal() +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
geom_text_repel(
data = subset(il10ko_data, qval < 0.05),
aes(label = simplified_feature),
size = 3, color = "black",
max.overlaps = 10  # Adjust this value to control the number of labels shown
) +
theme(legend.position = "none")
# Filter for MifKO and calculate marker size
mifkO_data <- subset(data, value == "MifKO")
mifkO_data$marker_size <- -log10(mifkO_data$qval) * 20
# Create the volcano plot with ggrepel to avoid overlapping
ggplot(mifkO_data, aes(x = coef, y = -log10(qval), color = qval < 0.05, size = marker_size)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("gray", "red")) +
labs(
x = "Coefficient (mifkO vs WT)",
y = "-log10(qval)",
title = "Volcano Plot of mifkO vs WT with Marker Size by Significance Level"
) +
theme_minimal() +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
geom_text_repel(
data = subset(mifkO_data, qval < 0.05),
aes(label = simplified_feature),
size = 3, color = "black",
max.overlaps = 10  # Adjust this value to control the number of labels shown
) +
theme(legend.position = "none")
# Save the plot as PDF
ggsave("Taxa differences on Volcano Plot in mifkO vs WT.pdf", p, width = 15, height = 12)
library(ggplot2)
library(readxl)
library(reshape2)
library(pheatmap)
library(openxlsx)
setwd("~/Library/CloudStorage/Dropbox/Ongoing Analysis/Wild-Type Mice vs Wild Mice Analysis/2022/Halla_cecum_metabolites_microbiota/Microbiota_vs_Metabolomics/Taxa-Metabolite Associations")
# Load input files
associations_file <- 'Associations.xlsx'
metabolites_file <- 'Metabolitesv2.xlsx'
tsv_file <- 'X_original.tsv'
# Load data
associations_df <- read_excel(associations_file, sheet = 'Sheet1')
metabolites_df <- read_excel(metabolites_file, sheet = 'Sheet1')
tsv_data <- read.csv(tsv_file, sep = '\t')
# Analysis 1: Generate Taxa vs Metabolite Associations Bar Plot
taxa_metabolite_counts <- aggregate(Metabolite ~ Taxa, data=associations_df, FUN=length)
# Plot bar graph
pdf("Taxa_Metabolite_Associations.pdf", width=15, height=8)
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Taxa Stratified by Metabolite Associations")
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations")
dev.off()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations")
# Analysis 3: Metabolite-Taxa Associations
metabolite_taxa_counts <- aggregate(Taxa ~ Metabolite, data=associations_df, FUN=length)
View(taxa_metabolite_counts)
ggplot(metabolite_taxa_counts, aes(x=reorder(Metabolite, Taxa), y=Taxa)) +
geom_line(aes(group=1), color="green") +
geom_point(color="green") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Metabolites (sorted by number of taxa associations)") +
ylab("Total Number of Taxa Associations") +
ggtitle("Dot-Line Plot: Metabolites Stratified by Number of Taxa Associations")
# Analysis 4: Generate Heatmap of Taxa Presence Across Vivaria
limited_taxa_list <- unique(associations_df$Taxa)
filtered_taxa_abundance <- tsv_data[tsv_data$MicrobiotaName %in% limited_taxa_list,]
# Save Metabolite-Taxa Associations Excel File
write.xlsx(associations_df[, c("Taxa", "Metabolite")], "Metabolite_Taxa_Distribution.xlsx")
# Analysis 4: Generate Heatmap of Taxa Presence Across Vivaria
limited_taxa_list <- unique(associations_df$Taxa)
limited_taxa_list
filtered_taxa_abundance <- tsv_data[tsv_data$MicrobiotaName %in% limited_taxa_list,]
# Convert to presence/absence format
binary_taxa_abundance <- as.data.frame(lapply(filtered_taxa_abundance[,-1], function(x) as.integer(x > 0)))
row.names(binary_taxa_abundance) <- filtered_taxa_abundance$MicrobiotaName
pheatmap(binary_taxa_abundance, color = colorRampPalette(c("white", "blue"))(50), cluster_rows=FALSE, cluster_cols=FALSE,
main="Corrected Presence-Absence Heatmap of Limited Taxa Across Vivaria")
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations")
# Analysis 3: Metabolite-Taxa Associations
metabolite_taxa_counts <- aggregate(Taxa ~ Metabolite, data=associations_df, FUN=length)
metabolite_taxa_counts
View(metabolite_taxa_counts)
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=0, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, vjust=0.5, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, vjust=0.5, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=180, vjust=0.5, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, vjust=0.5, hjust=1)) +  # Adjusts label rotation and alignment
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") +
theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, vjust=0.5, hjust=1, size=10)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") +
theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5, size=10)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") +
theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=-45, vjust=0.5, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
library(ggplot2)
# Example plot with corrected x-axis label rotation
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
scale_x_discrete(guide = guide_axis(angle = 90)) +  # Correct x-axis label rotation
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") +
theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=-45, vjust=0.5, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(metabolite_taxa_counts, aes(x=reorder(Metabolite, Taxa), y=Taxa)) +
geom_line(aes(group=1), color="green") +
geom_point(color="green") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Metabolites (sorted by number of taxa associations)") +
ylab("Total Number of Taxa Associations") +
ggtitle("Dot-Line Plot: Metabolites Stratified by Number of Taxa Associations")
ggplot(metabolite_taxa_counts, aes(x=reorder(Metabolite, Taxa), y=Taxa)) +
geom_line(aes(group=1), color="red") +
geom_point(color="red") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Metabolites (sorted by number of taxa associations)") +
ylab("Total Number of Taxa Associations") +
ggtitle("Dot-Line Plot: Metabolites Stratified by Number of Taxa Associations")
ggplot(metabolite_taxa_counts, aes(x=reorder(Metabolite, Taxa), y=Taxa)) +
geom_line(aes(group=1), color="red") +
geom_point(color="red") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Metabolites (sorted by number of taxa associations)") + theme_bw()
ggplot(metabolite_taxa_counts, aes(x=reorder(Metabolite, Taxa), y=Taxa)) +
geom_line(aes(group=1), color="red") +
geom_point(color="red") +
scale_x_discrete(guide = guide_axis(angle = 90)) +  # Correct x-axis label rotation
xlab("Individual Metabolites (sorted by number of taxa associations)") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Taxa Stratified by Metabolite Associations") + theme_bw()
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
theme(axis.text.x = element_text(angle=-45, vjust=0.5, hjust=1)) +
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") + theme_bw()
# Example plot with corrected x-axis label rotation
ggplot(taxa_metabolite_counts, aes(x=reorder(Taxa, Metabolite), y=Metabolite)) +
geom_line(aes(group=1), color="blue") +
geom_point(color="blue") +
scale_x_discrete(guide = guide_axis(angle = 90)) +  # Correct x-axis label rotation
xlab("Individual Taxa (sorted by number of associations)") +
ylab("Total Number of Metabolite Associations") +
ggtitle("Dot-Line Plot: Taxa Stratified by Metabolite Associations") +
theme_bw()
# Analysis 3: Metabolite-Taxa Associations
metabolite_taxa_counts <- aggregate(Taxa ~ Metabolite, data=associations_df, FUN=length)
ggplot(metabolite_taxa_counts, aes(x=reorder(Metabolite, Taxa), y=Taxa)) +
geom_line(aes(group=1), color="red") +
geom_point(color="red") +
scale_x_discrete(guide = guide_axis(angle = 90)) +  # Correct x-axis label rotation
xlab("Individual Metabolites (sorted by number of taxa associations)") + theme_bw()
# Analysis 4: Generate Heatmap of Taxa Presence Across Vivaria
limited_taxa_list <- unique(associations_df$Taxa)
filtered_taxa_abundance <- tsv_data[tsv_data$MicrobiotaName %in% limited_taxa_list,]
# Convert to presence/absence format
binary_taxa_abundance <- as.data.frame(lapply(filtered_taxa_abundance[,-1], function(x) as.integer(x > 0)))
row.names(binary_taxa_abundance) <- filtered_taxa_abundance$MicrobiotaName
binary_taxa_abundance
row.names(binary_taxa_abundance)
